{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tiling the Sky for the Hector Galaxy Survey","text":"<p>This documentation describes the code I've written to go from a catalogue of galaxies to individual tiles which are ready to go through the Hector Observing Pipeline.</p> <p>This code is a <code>python</code> translation of Aaron Robotham's <code>R</code> code written for the GAMA survey (described in the paper Optimal Tiling of Dense Surveys with a Multi-Object Spectrograph). Be sure to cite Aaron's work when referencing this code!</p>"},{"location":"issues/","title":"Notes for future improvements...","text":"<p>There are a few places that the tiling code will need to be modified/improved in the future. Below explains briefly what will need to be updated.</p>"},{"location":"issues/#galaxies-which-have-been-observed-but-not-reduced","title":"Galaxies which have been observed but not reduced","text":"<p>At the moment, the code finds which galaxies which have been observed and reduces their <code>N_observations_to_complete</code> counter by 1. Ideally, however, there needs to be two checks here: galaxies which have been observed and not yet reduced as well as galaxies which have been reduced and passed the quality control (QC) process. In other words, the tiling code at the moment can't account for galaxies which have been observed but which fail QC and need to be re-observed.</p> <p>When the data reduction pipeline and QC process is mature and stable, I'd recommend making a new table in the Hector Observing Database which tracks the galaxies which have passed the QC checks. This needs a bit of thought, but I think that this \"QC\" column needs to have three options:</p> <ul> <li>QC passed- this galaxy is done and shouldn't be re-tiled.</li> <li>QC failed- this galaxy needs to be tiled again</li> <li>QC pending- this galaxy hasn't been reduced/checked yet, in which case it also shouldn't be re-tiled.</li> </ul> <p>You'll then be able to update the start of <code>workflow/scripts/remove_observed_galaxies.py</code> to only remove only galaxies which have passed QC or for which QC is still pending. Galaxies which have been observed and which failed QC should be put back into the catalogues.</p>"},{"location":"issues/#a-small-bug-with-the-plotting","title":"A small bug with the plotting","text":"<p>Currently, the plots which the code make are incorrect for fields at low declination. Below is an example:</p> <p></p> <p>You can see that some of the galaxies have been placed outside of the red exclusion radius. This is only a bug with the plotting, not with the files the code makes.</p> <p>There's a simple \\(\\cos(\\delta)\\) factor which needs to be included in the plotting. You can see that this is the case because the plot has a perfect circle for the field-of-view. In reality, the circular metal Hector plate actually covers an elliptical region in RA and DEC on the surface of the celestial sphere when you get to low declinations. </p> <p>The place to fix this would be in the <code>plot_tile</code> function of the <code>tiling_functions.py</code> file. Line 1072 to 1078 plot the outer field radius- these should be changed to ellipses, with a semiminor axis of 1 degree and a semimajor axis scaled by the declination, i.e. of \\(1/\\cos(\\delta)\\).</p>"},{"location":"issues/#a-new-tile-cutout-shape","title":"A new tile cutout shape","text":"<p>The first step of the tiling works by placing a \"Hector Field of View\" down on the sky and seeing which targets fall within its outer edge. One issue caused by this is that galaxies can end up very close to the three exit gaps on the plate. In an ideal world, I think the \"Field of View\" used in the first step should have little cutouts around the positions where these exit gaps are.</p> <p></p> <p>There might be some headaches implementing this in the code: the current method in <code>tiling_functions.py</code> does the following check:</p> <pre><code>mask = np.sqrt((x - xcen) ** 2 * cos_dec_correction**2 + (y - ycen) ** 2) &lt; radius\n</code></pre> <p>whereas the new mask would mean you'd have to have some more complicated logic about subtracting the three new cutouts. You'd also need to find the optimum radii for these three cutouts and find how this impacts the tiling efficiency (my guess- probably very little).</p>"},{"location":"walkthrough/","title":"Running the Code","text":"<p>To start a new iteration of the tiling, taking into account the galaxies which have already been observed during the survey, follow the steps under Running the Tiling. This will create the necessary <code>.fld</code> files for the targets in each of the Hector Regions (G12, G15, etc).</p> <p>If you want to tile a new region of the sky, go to Adding a new region</p>"},{"location":"walkthrough/#running-the-tiling","title":"Running the Tiling","text":"<ol> <li>Create a new config file named <code>YYYMMDD.yaml</code> in the <code>config</code> folder. This should contain a single entry which is the date you're conducting the tiling. This is used to make the output folder in <code>results</code>. The format for this line should be <code>date: YYYYMMDD</code>.</li> <li>Ensure that the most up-to-date versions of the Master Region catalogues are in the <code>resources/MasterRegionCatalogues</code> folder. These are the files which contain all the Hector targets in a given region (including galaxies which have been observed already). Note that we need three catalogues to tile a region of sky- a galaxy catalogue, a guide star catalogue and a standard star catalogue.</li> <li>Ensure that the up-to-date Hector Observing Database is sym-linked in the <code>resources/HectorDB/hector.db</code>. The script <code>workflow/scripts/remove_observed_galaxies.py</code> uses the <code>galaxies_observed</code> table to see which targets from the Master Region catalogue have already been targeted. Anything in this table will have its value of <code>N_observations_to_complete</code> reduced by 1. Anything with <code>N_observations_to_complete</code> equal to 0 will be ignored by the Tiling code.</li> <li>Now run <code>snakemake -npr --configfile config/YYYMMDD.yaml</code>, giving it the name of the config file you made earlier. This will print out the steps the pipeline will undertake. Note that this command will tile all of the different regions Hector will observe. I highly recommend that you always retile all of the regions together. It is possible to only make new tiles for, say, H01 on its own. However you'd then need to remember that the most recent tiles for H01 were in a different folder than all of the others and it would be easy to make a mistake when preparing for a run~</li> <li>If all that looks acceptable, run <code>snakemake --configfile config/YYYMMDD.yaml</code> to actually run the code.</li> <li>You should end up with a new folder in <code>results/YYYMMDD</code>. This should contain two folders: <code>MasterRegionCatalogues</code> and <code>Tiling</code>. The <code>MasterRegionCatalogues</code> folder contains all of the targets for a given region with all the targets we've already completed removed. This is the catalogue which has actually been tiled by the code. The <code>Tiling</code> folder contains the <code>.fld</code> files which you'll need for the Observing Pipeline, as well as plots of each of the tiles the code has made.</li> </ol>"},{"location":"walkthrough/#adding-a-new-region","title":"Adding a new Region","text":"<p>To add a new region to the tiling, you'll have to make adjustments in three places:</p> <ol> <li>Add the required galaxy, standard star and guide star catalogues to the correct subdirectory in the <code>resources/MasterRegionCatalogues/</code> folder.</li> <li>Add a line to the <code>resources/RegionInformation/all_regions.csv</code> file. Each row sets out a square patch of sky to define the area each \"region\" covers.</li> <li>Add the name of the new region to line 21 of <code>workflow/Snakefile</code>. This line sets out which regions the code will run on.</li> </ol> <p>And that should be it!</p>"}]}